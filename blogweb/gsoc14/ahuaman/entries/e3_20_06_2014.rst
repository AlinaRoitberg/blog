.. blogpost::
   :title: 2. Fitting superquadrics (a.k.a. The Horror of Box Constrained Non-Linear Optimization)
   :author: ahuaman
   :date: 20-06-2014

   In this post we will see some initial results for fitting superquadrics to full pointclouds. 
   Let's quickly start with the math so you have a good idea of how the code works. 

   I will remind you again the superellipsoid
   equation (yes, I will keep bringing up the equation again and again  so it stays forever on your brain):

   .. math:: \left( \left(\dfrac{x}{a}\right)^{\frac{2}{\epsilon_{2}}} + \left(\dfrac{y}{b}\right)^{\frac{2}{\epsilon_{2}}} \right) ^{\frac{\epsilon_{2}}{\epsilon_1} } + \left(\dfrac{z}{c}\right)^{\frac{2}{\epsilon_{1}}} = 1
      :label: se_eq

   
   We will call the expression to the left :math:`F(x,y,z)`. A 3D point(:math:`(x_{i},y_{i},z_{i})`) will belong to the canonical superquadric 
   defined by the parameters :math:`(a,b,c,\epsilon_{1}, \epsilon_{2})` if :math:`F(x_{i},y_{i},z_{i}) = 1`. To
   have a general superquadric, we must consider the translation and rotation terms, hence the general equation :eq:`se_eq` has the following form:


   .. math:: F(x,y,z) =  \left[ \left(\dfrac{ n_{x}x + n_{y}y + n_{z}z -t_{x}n_{x}-t_{y}n_{y} - t_{z}n_{z} }{a}\right)^{\frac{2}{\epsilon_{2}}} + \left(\dfrac{ o_{x}x + o_{y}y + o_{z}z -t_{x}n_{x}-t_{y}o_{y} - t_{z}o_{z} }{b}\right)^{\frac{2}{\epsilon_{2}}} \right] ^{\frac{\epsilon_{2}}{\epsilon_1} } + \left(\dfrac{ a_{x}x + a_{y}y + a_{z}z -t_{x}a_{x}-t_{y}a_{y} - t_{z}a_{z} }{c}\right)^{\frac{2}{\epsilon_{1}}} = 1
      :label: se_eq_full
  
   where :math:`\mathbf{t}` is the translation of the superellipsoid center with respect to a given 
   global frame and :math:`(\mathbf{n},\mathbf{o},\mathbf{a})` are the column vectors of the rotation matrix
   of the superellipsoid (again, with respect to some defined global axes). In fact, to be completely 
   rigurous, we should express :math:`F(.)` as a function of both the point being evaluated and the superellipsoid
   parameters being used: :math:`F(x,\Lambda)` where :math:`\Lambda = (a,b,c,\epsilon_{1}, \epsilon_{2},t_{x}, t_{y}, t_{z}, \psi, \theta, \gamma)`


   In order to find the superellipsoid that best fit a given full pointcloud (composed by 3D points :math:`\mathbf{x}_{i}` with :math:`i \in [1,k]`, 
   we need to minimize the error between each point and equation
   :eq:`se_eq_full`. In its most basic form, we could try to minimize this equation:

   .. math::

      \min_{k} \sum_{k=0}^{n} \left( F(\mathbf{x}; \Lambda) - 1 \right ) ^{2}

   Some wise people suggested a couple of modifications to the basic version above and came up with this:

   .. math::

      \min_{k} \sum_{k=0}^{n} \left( \sqrt{abc}F^{\epsilon_{1}}(\mathbf{x}; \Lambda) - 1 \right ) ^{2}

   the :math:`\sqrt{abc}` factor makes sure that the superellipsoid obtained is the smallest possible. The
   additional exponent :math:`\epsilon_{1}` improves the convergence time. 

   As of now, I will not go into more details on the math behind since I am running out of time to write this entry. However, there are a few
   things that you should remember of this post:

   * Our goal is to solve a Non-Linear Square problem.
   * We have 11 parameters to find
   * Our parameters are bounded, which means that they have upper and lower limits. This constraints
     the type of algorithms we can use to optimize our solution.
   * The more dense the pointcloud is, the more factors will be considered in the equation above.
  

   As of now, we have implemented the method described in [Duncan13]_ to fit segmented, full pointclouds to superellipsoids. In
   this post we will present some initial results obtained for 4 test cases (sphere, box, cylinder and oval shape). We tested them
   in 3 scenarios:

   * Canonical superellipsoids with no noise.
   * General superellipsoids (rotation and translation added) no noise.
   * General superellipsoids with noise (up to 5% of the length of the smallest principal axis).


   Let's start with the initial test cases:

   +----------------------------------------------------+
   | Case 0: Parameters used                            |
   +-----------+--------+-----------+----------+--------+
   | Parameter | Sphere | Ellipsoid | Cylinder | Box    |
   +===========+========+===========+==========+========+
   | a         | 0.25   | 0.04      | 0.05     | 0.025  |
   +-----------+--------+-----------+----------+--------+
   | b         | 0.25   | 0.08      | 0.05     | 0.08   |
   +-----------+--------+-----------+----------+--------+
   | c         | 0.25   | 0.06      | 0.1      | 0.18   |
   +-----------+--------+-----------+----------+--------+
   | e1        | 1      | 0.75      | 0.25     | 0.1    |
   +-----------+--------+-----------+----------+--------+
   | e2        | 1      | 0.75      | 1.0      | 0.1    |
   +-----------+--------+-----------+----------+--------+

   The pointclouds are shown in the following figure and are also available in `my repository <https://github.com/ana-GT/GSoC_PCL/tree/master/data>`_ . 


   .. image:: images/e3/clean_clouds.png
	      :height: 240px
	      :align: center


   The code used for the results shown in the rest of this post can be found `here <https://github.com/ana-GT/pcl/blob/sq-fitting/apps/sq_fitting/tests/SQ_fitter_test1.cpp>`_ . 
   

   For the first test case we generated full sampled pointclouds by using the sampling code we presented in our previous post.
   To initialize the maximizer, we used the pointcloud's bounding box information for the superellipsoid dimensions and
   global transform. For all cases we used an initial value of 0.5 for :math:`\epsilon_{1}` and 1.0 for :math:`\epsilon_{2}`
   (these values are in the middle of the allowed range).

   Results for the fitting are shown in the following table. It can be seen that the fitting works pretty well, which is
   kind of expected since this is the most basic case.

   +----------------------------------------------------+
   | Case 0: Results                                    |
   +-----------+--------+-----------+----------+--------+
   | Parameter | Sphere | Ellipsoid | Cylinder | Box    |
   +===========+========+===========+==========+========+
   | a         | 0.247  | 0.039     | 0.0499   | 0.025  |
   +-----------+--------+-----------+----------+--------+
   | b         | 0.247  | 0.079     | 0.049    | 0.079  |
   +-----------+--------+-----------+----------+--------+
   | c         | 0.247  | 0.059     | 0.099    | 0.179  |
   +-----------+--------+-----------+----------+--------+
   | e1        | 0.99   | 0.753     | 0.271    | 0.10   |
   +-----------+--------+-----------+----------+--------+
   | e2        | 0.99   | 0.753     | 0.97     | 0.13   |
   +-----------+--------+-----------+----------+--------+

   For case 1, we modified the test pointclouds by applying a transformation to them. Details of the transformations for each case are
   shown below (the parameters :math:`a,b,c,\epsilon_{1},\epsilon_{2}` remain constant so we omit to repeat them).

   +----------------------------------------------------+
   | Case 1: Parameters                                 |
   +-----------+--------+-----------+----------+--------+
   | Parameter | Sphere | Ellipsoid | Cylinder | Box    |
   +===========+========+===========+==========+========+
   | x         | 0.5    | -0.6      | -0.4     | -0.1   |
   +-----------+--------+-----------+----------+--------+
   | y         | 0.8    | 0.2       |  0.7     | 0.3    |
   +-----------+--------+-----------+----------+--------+
   | z         | 0.0    | 0.0       | 0.3      | 0.5    |
   +-----------+--------+-----------+----------+--------+
   | roll      | 0.0    | 0.2       | 0.6      | 0.0    |
   +-----------+--------+-----------+----------+--------+
   | pitch     | 0.0    | 0.5       | 0.9      | 0.0    |
   +-----------+--------+-----------+----------+--------+
   | yaw       | 0.3    | 0.3       | 0.8      | 0.8    |
   +-----------+--------+-----------+----------+--------+


   The results are shown below. We observed that the parameters that remain constant keep approximately the same fitted values as in Case 0,
   so we won't repeat them in the next table. 

   +----------------------------------------------------+
   | Case 1: Results                                    |
   +-----------+--------+-----------+----------+--------+
   | Parameter | Sphere | Ellipsoid | Cylinder | Box    |
   +===========+========+===========+==========+========+
   | x         | 0.5    | -0.6      | -0.4     | -0.1   |
   +-----------+--------+-----------+----------+--------+
   | y         | 0.8    | 0.199     |  0.69    | 0.3    |
   +-----------+--------+-----------+----------+--------+
   | z         | 0.0    | 0.0       | 0.29     | 0.49   |
   +-----------+--------+-----------+----------+--------+
   | roll      | 0.0    | 0.199     | -0.117   | 0.0    |
   +-----------+--------+-----------+----------+--------+
   | pitch     | 0.0    | 0.49      | 1.02     | 0.0    |
   +-----------+--------+-----------+----------+--------+
   | yaw       | 0.0    | 0.29      | -0.055   | -2.34  |
   +-----------+--------+-----------+----------+--------+

   We can observe that the translation values are well fitted, while the same is not the case for the rotation values. In the next post we should
   discuss some ideas to fix that.

   Finally, we added noise to the pointclouds. The values used are shown in the following table (meaning that a uniform 
   disturbance between :math:`[-\delta,\delta]` was randomly applied to each point in the pointcloud.

   +---------------------------------------------------------+
   | Case 2: Parameters                                      |
   +----------------+--------+-----------+----------+--------+
   | Parameter      | Sphere | Ellipsoid | Cylinder | Box    |
   +================+========+===========+==========+========+
   | :math:`\delta` | 0.01   | 0.002     | 0.0025   | 0.0015 |
   +----------------+--------+-----------+----------+--------+
   | Percentage     | 4%     | 5%        | 5%       | 6%     |
   +----------------+--------+-----------+----------+--------+

   The pointclouds are shown in the following figure:

   .. image:: images/e3/noisy_clouds.png
	      :height: 240px
	      :align: center



   The final parameters are shown below:

   +----------------------------------------------------+
   | Case 2: Results                                    |
   +-----------+--------+-----------+----------+--------+
   | Parameter | Sphere | Ellipsoid | Cylinder | Box    |
   +===========+========+===========+==========+========+
   | a         | 0.24   | 0.039     | 0.049    | 0.025  |
   +-----------+--------+-----------+----------+--------+
   | b         | 0.245  | 0.079     | 0.049    | 0.08   |
   +-----------+--------+-----------+----------+--------+
   | c         | 0.249  | 0.0601    | 0.102    | 0.19   |
   +-----------+--------+-----------+----------+--------+
   | e1        | 1      | 0.76      |  0.35    | 0.33   |
   +-----------+--------+-----------+----------+--------+
   | e2        | 0.91   | 0.71      | 0.92     | 0.1    |
   +-----------+--------+-----------+----------+--------+
   | x         | 0.49   | -0.59     | -0.39    | -0.1   |
   +-----------+--------+-----------+----------+--------+
   | y         | 0.8    | 0.19      |  0.70    | 0.3    |
   +-----------+--------+-----------+----------+--------+
   | z         | 0.0    | 0.0       | 0.30     | 0.49   |
   +-----------+--------+-----------+----------+--------+
   | roll      | 0.0    | 0.19      | 0.95     | 0.0    |
   +-----------+--------+-----------+----------+--------+
   | pitch     | 0.0    | 0.50      | 0.47     | 0.0    |
   +-----------+--------+-----------+----------+--------+
   | yaw       | -2.8   | 0.30      | 1.34     | -2.3   |
   +-----------+--------+-----------+----------+--------+


   I should probably put a parallel table with all the original values so you can compare visually more easily. In any case, couple of observations:

   * Rotation final values are the ones with the biggest errors.
   * Noise levels that exceed 5% are not acceptable (the fitting values :math:`\epsilon_{1}` and :math:`\epsilon_2` vary
     significantly, altering the shape of the object. The other parameters keep being reasonably accurate.
   * We are not using any loss function to alleviate the effect of the outliers. Here that did not prove particularly important, but 
     when we do experiments with data that is not synthetically obtained (real pointclouds of objects) it will probably matter.
   * A crucial requirement for a good fit is the initialization of the Z axis of the object (revolution axis). 


   .. [Duncan13] Duncan, Kester, et al. "Multi-scale superquadric fitting for efficient shape and pose recovery of unknown objects." Robotics and Automation (ICRA), 2013 IEEE International Conference on. IEEE, 2013.
